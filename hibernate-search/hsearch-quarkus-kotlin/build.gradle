plugins {
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.allopen" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.jpa" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.kapt" version "${kotlinVersion}"
    id 'io.quarkus'
    id "com.avast.gradle.docker-compose" version "0.13.2"
}

repositories {
     mavenLocal()
     mavenCentral()
}

dependencies {
    implementation 'io.quarkus:quarkus-config-yaml'
    implementation 'io.quarkus:quarkus-hibernate-orm-panache-kotlin'
    implementation 'io.quarkus:quarkus-jdbc-postgresql'
    implementation 'io.quarkus:quarkus-resteasy-jsonb'
    implementation 'io.quarkus:quarkus-kotlin'
    implementation 'io.quarkus:quarkus-hibernate-orm'
    implementation 'io.quarkus:quarkus-hibernate-search-elasticsearch'
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-resteasy'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "com.github.pozo:mapstruct-kotlin:${mapstructKotlinVersion}"
    kapt "com.github.pozo:mapstruct-kotlin-processor:${mapstructKotlinVersion}"
    kapt "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:kotlin-extensions'
}

group 'org.hibernate.search.demos'
version '1.0.0-SNAPSHOT'

quarkus {
    setOutputDirectory("$projectDir/build/classes/kotlin/main")
}

quarkusDev {
    setSourceDir("$projectDir/src/main/kotlin")
}

allOpen {
    annotation("javax.ws.rs.Path")
    annotation("javax.enterprise.context.ApplicationScoped")
    annotation("io.quarkus.test.junit.QuarkusTest")
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
    kotlinOptions.javaParameters = true
}

compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}

kapt {
    arguments {
        arg("mapstruct.defaultComponentModel", "cdi")
    }
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"

    if (project.hasProperty("docker")) {
        environment "POSTGRESQL_HOST", "localhost"
        environment "POSTGRESQL_DB", "hsearch_demo"
        environment "POSTGRESQL_USERNAME", "hsearch_demo"
        environment "POSTGRESQL_PASSWORD", "hsearch_demo"
        environment "ES_HOSTS", "localhost:9200"
        environment "ES_PROTOCOL", "http"
    }
}

dockerCompose {
    useComposeFiles = ['test-environment.yml']
}

if (project.hasProperty("docker")) {
    dockerCompose.isRequiredBy(test)
    dockerCompose.isRequiredBy(quarkusDev)

    tasks.test.configure {
        it.environment "POSTGRESQL_HOST", "localhost"
        it.environment "POSTGRESQL_DB", "hsearch_demo"
        it.environment "POSTGRESQL_USERNAME", "hsearch_demo"
        it.environment "POSTGRESQL_PASSWORD", "hsearch_demo"
        it.environment "ES_HOSTS", "localhost:9200"
        it.environment "ES_PROTOCOL", "http"
    }
    def envFile = file(".env")
    tasks.quarkusDev.with {
        it.doFirst {
            envFile.deleteOnExit()
            envFile.text = """
POSTGRESQL_HOST=localhost
POSTGRESQL_DB=hsearch_demo
POSTGRESQL_USERNAME=hsearch_demo
POSTGRESQL_PASSWORD=hsearch_demo
ES_HOSTS=localhost:9200
ES_PROTOCOL=http
"""
        }
        it.doLast {
            envFile.delete()
        }
    }
}